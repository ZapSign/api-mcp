services:
  # HTTPS Reverse Proxy (Nginx) for production
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/simple.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - mcp-zapsign-server
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Production optimizations
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Production MCP ZapSign Server
  mcp-zapsign-server:
    build: .
    container_name: mcp-zapsign-server
    expose:
      - "3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - ENABLE_RATE_LIMITING=true
      - MAX_REQUESTS_PER_MINUTE=100
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network
    # Production optimizations
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # SSL services commented out for initial testing
  # Uncomment after basic setup is working
  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   volumes:
  #     - ./nginx/ssl:/etc/letsencrypt
  #     - ./nginx/webroot:/var/www/html
  #   command: certonly --webroot --webroot-path=/var/www/html --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
  #   depends_on:
  #     - nginx-proxy
  #   networks:
  #     - mcp-network
  #   restart: "no"

networks:
  mcp-network:
    driver: bridge
    # Production network settings
    driver_opts:
      com.docker.network.bridge.name: mcp-bridge
